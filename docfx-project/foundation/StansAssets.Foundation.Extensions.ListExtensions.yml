### YamlMime:ManagedReference
items:
- uid: StansAssets.Foundation.Extensions.ListExtensions
  commentId: T:StansAssets.Foundation.Extensions.ListExtensions
  id: ListExtensions
  parent: StansAssets.Foundation.Extensions
  children:
  - StansAssets.Foundation.Extensions.ListExtensions.Clone``1(List{``0})
  - StansAssets.Foundation.Extensions.ListExtensions.Resize``1(List{``0},System.Int32,``0)
  - StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy``1(List{``0})
  langs:
  - csharp
  - vb
  name: ListExtensions
  nameWithType: ListExtensions
  fullName: StansAssets.Foundation.Extensions.ListExtensions
  type: Class
  source:
    id: ListExtensions
    path: ''
    startLine: 610
  assemblies:
  - cs.temp.dll
  namespace: StansAssets.Foundation.Extensions
  summary: "\nCSharp List extension methods.\n"
  example: []
  syntax:
    content: public static class ListExtensions
    content.vb: Public Module ListExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: StansAssets.Foundation.Extensions.ListExtensions.Resize``1(List{``0},System.Int32,``0)
  commentId: M:StansAssets.Foundation.Extensions.ListExtensions.Resize``1(List{``0},System.Int32,``0)
  id: Resize``1(List{``0},System.Int32,``0)
  isExtensionMethod: true
  parent: StansAssets.Foundation.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: Resize<T>(List<T>, Int32, T)
  nameWithType: ListExtensions.Resize<T>(List<T>, Int32, T)
  fullName: StansAssets.Foundation.Extensions.ListExtensions.Resize<T>(List<T>, System.Int32, T)
  type: Method
  source:
    id: Resize
    path: ''
    startLine: 618
  assemblies:
  - cs.temp.dll
  namespace: StansAssets.Foundation.Extensions
  summary: "\nResizes the list. In case of increase list size - fills it with default elements.\n"
  example: []
  syntax:
    content: public static void Resize<T>(this List<T> list, int newSize, T defaultValue = null)
    parameters:
    - id: list
      type: List{{T}}
      description: The current list.
    - id: newSize
      type: System.Int32
      description: The new size of the list.
    - id: defaultValue
      type: '{T}'
      description: The default value to set as new list elements.
    typeParameters:
    - id: T
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Resize(Of T)(list As List(Of T), newSize As Integer, defaultValue As T = Nothing)
  overload: StansAssets.Foundation.Extensions.ListExtensions.Resize*
  nameWithType.vb: ListExtensions.Resize(Of T)(List(Of T), Int32, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: StansAssets.Foundation.Extensions.ListExtensions.Resize(Of T)(List(Of T), System.Int32, T)
  name.vb: Resize(Of T)(List(Of T), Int32, T)
- uid: StansAssets.Foundation.Extensions.ListExtensions.Clone``1(List{``0})
  commentId: M:StansAssets.Foundation.Extensions.ListExtensions.Clone``1(List{``0})
  id: Clone``1(List{``0})
  isExtensionMethod: true
  parent: StansAssets.Foundation.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: Clone<T>(List<T>)
  nameWithType: ListExtensions.Clone<T>(List<T>)
  fullName: StansAssets.Foundation.Extensions.ListExtensions.Clone<T>(List<T>)
  type: Method
  source:
    id: Clone
    path: ''
    startLine: 639
  assemblies:
  - cs.temp.dll
  namespace: StansAssets.Foundation.Extensions
  summary: "\nCreates a deep copy of the list.\n"
  example: []
  syntax:
    content: >-
      public static List<T> Clone<T>(this List<T> list)
          where T : ICloneable
    parameters:
    - id: list
      type: List{{T}}
      description: The current list.
    typeParameters:
    - id: T
    return:
      type: List{{T}}
      description: The deep copy of the current list.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clone(Of T As ICloneable)(list As List(Of T)) As List(Of T)
  overload: StansAssets.Foundation.Extensions.ListExtensions.Clone*
  nameWithType.vb: ListExtensions.Clone(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: StansAssets.Foundation.Extensions.ListExtensions.Clone(Of T)(List(Of T))
  name.vb: Clone(Of T)(List(Of T))
- uid: StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy``1(List{``0})
  commentId: M:StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy``1(List{``0})
  id: ShallowCopy``1(List{``0})
  isExtensionMethod: true
  parent: StansAssets.Foundation.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: ShallowCopy<T>(List<T>)
  nameWithType: ListExtensions.ShallowCopy<T>(List<T>)
  fullName: StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy<T>(List<T>)
  type: Method
  source:
    id: ShallowCopy
    path: ''
    startLine: 649
  assemblies:
  - cs.temp.dll
  namespace: StansAssets.Foundation.Extensions
  summary: "\nCreates a shallow copy of the list.\n"
  example: []
  syntax:
    content: public static List<T> ShallowCopy<T>(this List<T> list)
    parameters:
    - id: list
      type: List{{T}}
      description: The current list.
    typeParameters:
    - id: T
    return:
      type: List{{T}}
      description: The shallow copy of the current list.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ShallowCopy(Of T)(list As List(Of T)) As List(Of T)
  overload: StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy*
  nameWithType.vb: ListExtensions.ShallowCopy(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy(Of T)(List(Of T))
  name.vb: ShallowCopy(Of T)(List(Of T))
references:
- uid: StansAssets.Foundation.Extensions
  commentId: N:StansAssets.Foundation.Extensions
  name: StansAssets.Foundation.Extensions
  nameWithType: StansAssets.Foundation.Extensions
  fullName: StansAssets.Foundation.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: StansAssets.Foundation.Extensions.ListExtensions.Resize*
  commentId: Overload:StansAssets.Foundation.Extensions.ListExtensions.Resize
  name: Resize
  nameWithType: ListExtensions.Resize
  fullName: StansAssets.Foundation.Extensions.ListExtensions.Resize
- uid: List{{T}}
  commentId: '!:List{``0}'
  definition: List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: StansAssets.Foundation.Extensions.ListExtensions.Clone*
  commentId: Overload:StansAssets.Foundation.Extensions.ListExtensions.Clone
  name: Clone
  nameWithType: ListExtensions.Clone
  fullName: StansAssets.Foundation.Extensions.ListExtensions.Clone
- uid: StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy*
  commentId: Overload:StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy
  name: ShallowCopy
  nameWithType: ListExtensions.ShallowCopy
  fullName: StansAssets.Foundation.Extensions.ListExtensions.ShallowCopy
